{"version":3,"sources":["assets/loadinggif.gif","GameBoard.js","Prompt.js","Loading.js","FoundryGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GameBoard","props","state","objectives","console","log","this","setState","className","Component","Prompt","title","image","src","text","onClick","handleClick","Loading","FoundryGame","missionState","currentMap","finishPreview","bind","finishIntro","document","missionData","Project","PublicName","renderOutput","Description","Mission","GrantBlock","PromptTitle","PromptBody","App","mission","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"q9vRAAAA,EAAOC,QAAU,IAA0B,wC,4LC2B5BC,E,kDAxBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,WAAY,IAJD,E,gEASfC,QAAQC,IAAIC,KAAKL,MAAME,YACvBG,KAAKC,SAAS,CAAEJ,WAAYG,KAAKL,MAAME,e,+BAKvC,OACI,yBAAKK,UAAU,kB,GAjBHC,aCcTC,MAZf,SAAgBT,GAEZ,OACI,yBAAKO,UAAU,UACVP,EAAMU,OAAS,4BAAKV,EAAMU,OAC1BV,EAAMW,OAAS,yBAAKC,IAAKZ,EAAMW,QAC/BX,EAAMa,MAAQ,yBAAKN,UAAU,eAAeP,EAAMa,MACnD,4BAAQC,QAASd,EAAMe,aAAvB,c,KCAGC,ICiDAC,E,kDAnDX,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTiB,aAAc,UACdC,WAAa,MAIjB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAVJ,E,4DAcfhB,KAAKC,SAAS,CAAEY,aAAc,Y,oCAI9Bb,KAAKC,SAAS,CAAEY,aAAc,c,0CAI9BK,SAASb,MAAQL,KAAKL,MAAMwB,YAAYC,QAAQC,a,+BAIhD,IAAIC,EAgBJ,OAbIA,EAD4B,YAA5BtB,KAAKJ,MAAMiB,aACI,kBAAC,EAAD,CAAQR,MAAOL,KAAKL,MAAMwB,YAAYC,QAAQC,WAAYb,KAAMR,KAAKL,MAAMwB,YAAYC,QAAQG,YAAab,YAAaV,KAAKe,gBAE5G,UAA5Bf,KAAKJ,MAAMiB,aACD,kBAAC,EAAD,CAAQR,MAAOL,KAAKL,MAAMwB,YAAYK,QAAQC,WAAWC,YAAalB,KAAMR,KAAKL,MAAMwB,YAAYK,QAAQC,WAAWE,WAAYjB,YAAaV,KAAKiB,cAElI,YAA5BjB,KAAKJ,MAAMiB,aACD,kBAAC,EAAD,CAAWM,YAAanB,KAAKL,MAAMwB,cAGnC,uDAA6BnB,KAAKJ,MAAMiB,aAAxC,KAKf,6BACKS,O,GA7CSnB,a,aCSXyB,MAVf,WAGE,OAFA9B,QAAQC,IAAI8B,GAGR,yBAAK3B,UAAU,OACX,kBAAC,EAAD,CAAaiB,YAAaU,MCAhBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASoB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.20dd37ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loadinggif.26ef8bb4.gif\";","import React, { Component } from 'react'\r\n\r\nclass GameBoard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            objectives: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.objectives);\r\n        this.setState({ objectives: this.props.objectives })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"gameboard\">\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default GameBoard;\r\n","import React from 'react';\n\n\n\nfunction Prompt(props) {\n\n    return (\n        <div className=\"prompt\">\n            {props.title && <h2>{props.title}</h2>}\n            {props.image && <img src={props.image}/>}\n            {props.text && <div className=\"prompt-text\">{props.text}</div>}\n            <button onClick={props.handleClick}>Continue</button>\n        </div>\n    );\n}\n\nexport default Prompt;\n","import React from 'react';\nimport loadinggif from './assets/loadinggif.gif'\n\n\nfunction Loading() {\n\n    return (\n        <img src={loadinggif} />\n    );\n}\n\nexport default Loading;\n","import React, { Component } from 'react'\r\n\r\nimport GameBoard from './GameBoard';\r\nimport Prompt from './Prompt';\r\n\r\nimport Loading from './Loading';\r\n\r\n\r\nclass FoundryGame extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            missionState: \"preview\", //state are preview/intro/playing\r\n            currentMap : null,\r\n        };\r\n\r\n\r\n        this.finishPreview = this.finishPreview.bind(this)\r\n        this.finishIntro = this.finishIntro.bind(this)\r\n    }\r\n\r\n    finishPreview() {\r\n        this.setState({ missionState: \"intro\" });\r\n    }\r\n\r\n    finishIntro() {\r\n        this.setState({ missionState: \"playing\" });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = this.props.missionData.Project.PublicName\r\n    }\r\n\r\n    render() {\r\n        let renderOutput;\r\n\r\n        if (this.state.missionState === \"preview\") {\r\n            renderOutput = <Prompt title={this.props.missionData.Project.PublicName} text={this.props.missionData.Project.Description} handleClick={this.finishPreview}/>\r\n        }\r\n        else if (this.state.missionState === \"intro\") {\r\n            renderOutput = <Prompt title={this.props.missionData.Mission.GrantBlock.PromptTitle} text={this.props.missionData.Mission.GrantBlock.PromptBody} handleClick={this.finishIntro} />\r\n        }\r\n        else if (this.state.missionState === \"playing\") {\r\n            renderOutput = <GameBoard missionData={this.props.missionData}/>\r\n        }\r\n        else {\r\n            renderOutput = <div>Error, unhandled state {this.state.missionState}.</div>\r\n        }\r\n        \r\n\r\n        return (\r\n            <div>\r\n                {renderOutput}\r\n            </div>\r\n        );\r\n    }\r\n}                            \r\n\r\n\r\nexport default FoundryGame;\r\n","import React from 'react';\nimport FoundryGame from './FoundryGame';\n\nimport mission from './assets/mission.json'\n\nimport './App.css';\n\nfunction App() {\n  console.log(mission);\n\n  return (\n      <div className=\"App\">\n          <FoundryGame missionData={mission} />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}