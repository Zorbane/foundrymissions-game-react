{"version":3,"sources":["assets/loadinggif.gif","ObjectiveList.js","Prompt.js","Map.js","GameBoard.js","Loading.js","FoundryGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ObjectiveList","props","state","console","log","this","objectives","className","map","objective","UIString","Component","Prompt","open","closeModal","bind","setState","renderOutput","type","title","image","src","text","onClick","buttontext","closeOnDocumentClick","onClose","promptComplete","defaultProps","Map","components","GameBoard","currentObjective","currentMap","nextMap","mapComponents","changeMap","nextMapId","missionData","Maps","find","MapId","nextMapComponents","Components","filter","component","Placement","MapName","doorComponents","Mission","MapLinks","mapLink","DoorComponent","firstMapLink","DialogBlock","promptTitle","PromptBody","SpawnInternalMapName","Objectives","Loading","FoundryGame","missionState","finishPreview","finishIntro","document","Project","PublicName","key","Description","GrantBlock","PromptTitle","App","mission","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7d93f360.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loadinggif.26ef8bb4.gif\";","import React, { Component } from 'react'\r\n\r\nclass ObjectiveList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.props.objectives);\r\n        return (\r\n            <div className=\"objectives-list\">\r\n                <h2>Objectives:</h2>\r\n                <ul>\r\n                    {\r\n                        this.props.objectives.map((objective) => {\r\n                            return (\r\n                                <li>{objective.UIString}</li>\r\n                            );\r\n                        })\r\n                    }\r\n                        \r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ObjectiveList;\r\n","import React, { Component } from 'react';\nimport Popup from 'reactjs-popup'\n\n\nclass Prompt extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { open: true }\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    closeModal() {\n\n        this.setState({ open: false });\n    }\n\n    render() {\n\n        let renderOutput;\n\n        //type is single or dialogprompt\n        if (this.props.type === \"single\") {\n            renderOutput =\r\n                <div>\r\n                    {this.props.title && <h2>{this.props.title}</h2>}\n                    {this.props.image && <img src={this.props.image} />}\n                    {this.props.text && <div className=\"prompt-text\">{this.props.text}</div>}\n                    <button onClick={this.closeModal}>{this.props.buttontext}</button>\r\n                </div>\r\n        }\n        else {\n            renderOutput = <div>No Output</div>\r\n        }\n        \n\n        return (\n            <Popup\n                open={this.state.open}\n                closeOnDocumentClick={false}\n                onClose={this.props.promptComplete}\n            >\n                {renderOutput}\n            </Popup>\n        );\n    }\n}\n\nPrompt.defaultProps = {\n    type: \"dialogprompt\",\r\n    buttontext : \"Continue\"\r\n}\n\nexport default Prompt;\n","import React, { Component } from 'react'\r\n\r\nclass Map extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            components : []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"map\">\r\n            \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Map;\r\n","import React, { Component } from 'react'\r\n\r\nimport ObjectiveList from './ObjectiveList'\r\nimport Prompt from './Prompt'\r\nimport Map from './Map'\r\n\r\nclass GameBoard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentObjective: 0,\r\n            currentMap: null,\r\n            nextMap : null,\r\n            mapComponents : []\r\n        };\r\n\r\n        this.changeMap = this.changeMap.bind(this);\r\n    }\r\n\r\n\r\n    changeMap(nextMapId) {\r\n\r\n        console.log(\"nextMapId\", nextMapId);\r\n        const nextMap = this.props.missionData.Maps.find(map => map.MapId === nextMapId);\r\n        console.log(\"nextMap\", nextMap)\r\n        const nextMapComponents = this.props.missionData.Components.filter(component => component.Placement.MapName === nextMap.MapId)\r\n        console.log(\"nextMapComponents\", nextMapComponents);\r\n\r\n        //finding the nextMapId is a bit more complicated. We need to find the door component in the nextmap components that triggers the a map link\r\n        const doorComponents = this.props.missionData.Mission.MapLinks.map((mapLink) => {\r\n            return mapLink.DoorComponent;\r\n        });\r\n\r\n        console.log(\"doorComponents\", doorComponents);\r\n\r\n        //this.setState({ currentMap: nextMap, mapComponents: nextMapComponents })        \r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        let renderOutput;\r\n\r\n        if (!this.state.currentMap) {\r\n            let firstMapLink = this.props.missionData.Mission.MapLinks[0];\r\n            renderOutput = <Prompt type=\"single\" buttontext=\"Begin Mission\" title={firstMapLink.DialogBlock.promptTitle} text={firstMapLink.DialogBlock.PromptBody} promptComplete={() => this.changeMap(firstMapLink.SpawnInternalMapName)} />\r\n        }\r\n        else {\r\n            renderOutput = <Map map={this.state.currentMap} components={this.state.mapComponents}/>\r\n        }\r\n\r\n        return (\r\n            <div className=\"gameboard\">\r\n                <ObjectiveList objectives={this.props.missionData.Mission.Objectives} />\r\n                {renderOutput}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default GameBoard;\r\n","import React from 'react';\nimport loadinggif from './assets/loadinggif.gif'\n\n\nfunction Loading() {\n\n    return (\n        <img src={loadinggif} />\n    );\n}\n\nexport default Loading;\n","import React, { Component } from 'react'\r\n\r\nimport GameBoard from './GameBoard';\r\nimport Prompt from './Prompt';\r\n\r\nimport Loading from './Loading';\r\n\r\n\r\nclass FoundryGame extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            missionState: \"preview\", //state are preview/intro/playing\r\n            currentMap : null,\r\n        };\r\n\r\n\r\n        this.finishPreview = this.finishPreview.bind(this)\r\n        this.finishIntro = this.finishIntro.bind(this)\r\n    }\r\n\r\n    finishPreview() {\r\n        console.log(\"Preview Finshed\");\r\n        this.setState({ missionState: \"intro\" });\r\n    }\r\n\r\n    finishIntro() {\r\n        console.log(\"Intro finished\");\r\n        this.setState({ missionState: \"playing\" });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = this.props.missionData.Project.PublicName\r\n    }\r\n\r\n    render() {\r\n        let renderOutput;\r\n\r\n        if (this.state.missionState === \"preview\") {\r\n            renderOutput = <Prompt key=\"preview\" type=\"single\" buttontext=\"Continue\" title={this.props.missionData.Project.PublicName} text={this.props.missionData.Project.Description} promptComplete={this.finishPreview}/>\r\n        }\r\n        else if (this.state.missionState === \"intro\") {\r\n            renderOutput = <Prompt key=\"intro\" type=\"single\" buttontext=\"Accept Mission\" title={this.props.missionData.Mission.GrantBlock.PromptTitle} text={this.props.missionData.Mission.GrantBlock.PromptBody} promptComplete={this.finishIntro} />\r\n        }\r\n        else if (this.state.missionState === \"playing\") {\r\n            renderOutput = <GameBoard missionData={this.props.missionData}/>\r\n        }\r\n        else {\r\n            renderOutput = <div>Error, unhandled state {this.state.missionState}.</div>\r\n        }\r\n        \r\n\r\n        return (\r\n            <div>\r\n                {renderOutput}\r\n            </div>\r\n        );\r\n    }\r\n}                            \r\n\r\n\r\nexport default FoundryGame;\r\n","import React from 'react';\nimport FoundryGame from './FoundryGame';\n\nimport mission from './assets/mission.json'\n\nimport './App.css';\n\nfunction App() {\n  console.log(mission);\n\n  return (\n      <div className=\"App\">\n          <FoundryGame missionData={mission} />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}