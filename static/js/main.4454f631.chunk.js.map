{"version":3,"sources":["assets/loadinggif.gif","ObjectiveList.js","Prompt.js","Map.js","GameBoard.js","Loading.js","FoundryGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ObjectiveList","props","state","className","this","objectives","map","objective","key","Number","UIString","Component","Prompt","open","currentPrompt","closeModal","bind","handleDialogButtonClick","setState","action","NextPromptID","renderOutput","type","title","text","onClick","buttontext","dialogComponent","PromptTitle","PromptBody","Action","ActionName","prompt","DialogPrompts","find","d","closeOnDocumentClick","onClose","promptComplete","defaultProps","Map","currentObjective","components","originalComponents","console","log","component","visible","linkedComponentComplete","Type","When","length","TriggerType","isComponentVisible","currentComponent","c","complete","linkedComponent","includes","when","ComponentId","componentComplete","objectiveNumber","filter","Placement","MapName","checkComponent","ObjectiveId","nextObjective","interactText","currentObjectiveNumber","objectiveVisibleSet","objectiveVisible","componentToCheck","InteractTriggerGroup","InteractText","push","HideWhen","hideWhen","componentNumber","renderDialog","activeDialog","buttonName","GameBoard","currentMap","mapComponents","mapObjectives","nextMap","nextMapComponent","changeMap","nextMapId","nextNextMapId","missionData","Maps","MapId","nextMapComponents","Components","nextMapObjectives","Mission","Objectives","ComponentMapName","MapLinks","mapLink","DoorComponent","SpawnInternalMapName","firstMapLink","DialogBlock","promptTitle","Loading","FoundryGame","missionState","finishPreview","finishIntro","document","Project","PublicName","Description","GrantBlock","App","mission","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4454f631.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loadinggif.26ef8bb4.gif\";","import React, { Component } from 'react'\r\n\r\nclass ObjectiveList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"objectives-list\">\r\n                <h2>Objectives:</h2>\r\n                <ul>\r\n                    {\r\n                        this.props.objectives.map((objective) => {\r\n                            return (\r\n                                <li key={objective.Number}>{objective.UIString}</li>\r\n                            );\r\n                        })\r\n                    }\r\n                        \r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ObjectiveList;\r\n","import React, { Component } from 'react';\nimport Popup from 'reactjs-popup'\n\n\nclass Prompt extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: true,\r\n            currentPrompt: -1,\r\n        }\n        this.closeModal = this.closeModal.bind(this);\n        this.handleDialogButtonClick = this.handleDialogButtonClick.bind(this);\n    }\n\n    closeModal() {\n\n        this.setState({ open: false });\n    }\n\n    handleDialogButtonClick(action) {\n        if (action.NextPromptID) {\n            this.setState({ currentPrompt: action.NextPromptID });\r\n        }\r\n        else {\r\n            this.closeModal();\r\n        }\r\n    }\n\n    render() {\n\n        let renderOutput;\n\n        //type is single or dialogprompt\n        if (this.props.type === \"single\") {\n            renderOutput =\r\n                <div>\r\n                    {this.props.title && <h2>{this.props.title}</h2>}\n                    {this.props.text && <div className=\"prompt-text\">{this.props.text}</div>}\n                    <button onClick={this.closeModal}>{this.props.buttontext}</button>\r\n                </div>\r\n        }\n        else if (this.props.type === \"dialogprompt\") {\n            if (this.state.currentPrompt === -1) {//this is the first one\n                renderOutput =\r\n\r\n                    <div>\r\n                        <h2>{this.props.dialogComponent.PromptTitle}</h2>\n                        <div className=\"prompt-text\">{this.props.dialogComponent.PromptBody}</div>\r\n                        <ul>\r\n                    {\r\n                            this.props.dialogComponent.Action.map((action) => {\r\n                                return (<li key={action.ActionName}><button onClick={() => this.handleDialogButtonClick(action)}>{action.ActionName}</button></li>)\r\n                        })\r\n                    }\r\n                        </ul>\r\n                    \r\n                    </div>\r\n            }\r\n            else {\r\n                //find the prompt\r\n                const prompt = this.props.dialogComponent.DialogPrompts.find(d => d.Number == this.state.currentPrompt);\r\n                if (prompt) {\r\n\r\n                    renderOutput = \r\n                        <div>\r\n                        <h2>{prompt.PromptTitle}</h2>\n                        <div className=\"prompt-text\">{prompt.PromptBody}</div>\r\n                            <ul>\r\n                                {\r\n                                prompt.Action.map((action) => {\r\n                                    return (<li key={action.ActionName}><button onClick={() => this.handleDialogButtonClick(action)}>{action.ActionName}</button></li>)\r\n                                    })\r\n                                }\r\n                            </ul>\r\n\r\n                        </div>\r\n                }\r\n                else {\r\n                    renderOutput = <div>Error prompt {this.state.currentPrompt} not found</div>\r\n                }\r\n            }\r\n        }\n        else {\n            renderOutput = <div>Unhandled prompt type {this.props.type}</div>\r\n        }\n        \n\n        return (\n            <Popup\n                open={this.state.open}\n                closeOnDocumentClick={false}\n                onClose={this.props.promptComplete}\n            >\n                {renderOutput}\n            </Popup>\n        );\n    }\n}\n\nPrompt.defaultProps = {\n    type: \"dialogprompt\",\r\n    buttontext : \"Continue\"\r\n}\n\nexport default Prompt;\n","import React, { Component } from 'react'\r\nimport Prompt from './Prompt';\r\n\r\nclass Map extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentObjective : 0,\r\n            components : []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const originalComponents = this.props.components;\r\n        console.log(this.props);\r\n\r\n        //lets go through all the components and set if its visible yet\r\n        //also give it a \"linkedComponentComplete\" array which contains the components that interact with it\r\n        for (let component of originalComponents) {\r\n            //default visible to false, and then if there is a reason, make it visible\r\n            component.visible = false;\r\n            component.linkedComponentComplete = [];\r\n            //a component is visible if it's WHEN trigger(s) are reached AND there is an interact reason (Component Complete or Objective)\r\n            //types to show are CONTACT DIALOG_TREE OBJECT KILL\r\n            //first check for visible dialogs at start (that's easy)\r\n            if (component.Type === \"DIALOG_TREE\" && component.When.length === 1 && component.When[0].TriggerType === \"MAP_START\")\r\n            {\r\n                component.visible = true;\r\n            }\r\n            else if (component.Type === \"CONTACT\"  || component.Type === \"OBJECT\" || component.Type === \"KILL\") {\r\n                component.visible = this.isComponentVisible(component, originalComponents, 0);\r\n            }\r\n            \r\n        }\r\n\r\n        this.setState({ components: originalComponents });\r\n    }\r\n\r\n\r\n    componentComplete(component) {\r\n        const components = this.state.components;\r\n        const currentComponent = components.find(c => c.Number === component.Number);\r\n\r\n        //first step is to make it not visible\r\n        currentComponent.visible = false;\r\n        currentComponent.complete = true;\r\n\r\n        //now check to see if completing this component satisfies the linked components\r\n        for (let linkedComponent of components) {\r\n            if (component.linkedComponentComplete.includes(linkedComponent.Number)) {\r\n                //check this component and see if it is supposed to be visible now\r\n                //default set to true and find reasons to make it not visible\r\n                let visible = true;\r\n                for (let when of linkedComponent.When) {\r\n                    if (when.TriggerType === \"COMPONENT_COMPLETE\" || when.TriggerType === \"COMPONENT_REACHED\") {\r\n                        if (when.ComponentId != component.Number) {\r\n                            console.log(linkedComponent);\r\n                            const otherLinkedComponent = components.find(c => c.Number === when.ComponentId)\r\n                            if (!otherLinkedComponent.componentComplete) {\r\n                                visible = false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                if (visible) {\r\n                    console.log(\"Make \" + linkedComponent.Number + \" visible!\");\r\n                }\r\n\r\n                linkedComponent.visible = visible;\r\n            }\r\n        }\r\n\r\n\r\n        //also check the objectives to see if it complete the current objective and if so check any components linked to that objective\r\n        let objectiveNumber = this.state.currentObjective;\r\n        let objective = this.props.objectives[objectiveNumber];\r\n\r\n        if (objective) { // may have already completed all the objectives on the map, time to go to the next one\r\n            if (objective.ComponentId == component.Number) {\r\n\r\n                //special check for dialog trees that have no map, they may be activated on objective complete\r\n                for (let checkComponent of components.filter(c => c.Type === \"DIALOG_TREE\" && c.Placement.MapName === \"\")) {\r\n                    if (checkComponent.When[0].TriggerType === \"OBJECTIVE_COMPLETE\" && checkComponent.When[0].ObjectiveId == objective.Number) {\r\n                        checkComponent.visible = true;\r\n                    }\r\n                }\r\n\r\n                //completed so increment objective number\r\n                objectiveNumber++;\r\n                let nextObjective = this.props.objectives[objectiveNumber];\r\n\r\n\r\n\r\n                if (nextObjective) { //there may be no next objective, because the map objectives are done!\r\n                    console.log(\"Next Objective\");\r\n                    console.log(nextObjective);\r\n                    //check for components that are now visible due to the next objective being active\r\n                    for (let checkComponent of components) {\r\n                        if (nextObjective.ComponentId == checkComponent.Number) {\r\n                            console.log(\"Found component to make visible due to being the next objective\");\r\n                            console.log(checkComponent);\r\n                            checkComponent.interactText = nextObjective.UIString;\r\n                            checkComponent.visible = true;\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n\r\n            this.setState({ components: components, currentObjective: objectiveNumber })\r\n        }\r\n    }\r\n\r\n    componentReached() {\r\n\r\n    }\r\n\r\n    isComponentVisible(component, components, currentObjectiveNumber) {\r\n\r\n        let objectiveVisibleSet = false;\r\n        let objectiveVisible = true;\r\n        //go through all the objectives. if it is needed in one of them then there is special handling.\r\n        //1. if it is the current objective then great! make it visible\r\n        //2. if it is not the current objective then make it not visible\r\n        for (let objective of this.props.objectives) {\r\n            if (objective.ComponentId == component.Number) {\r\n                if (objective.Number === this.props.objectives[currentObjectiveNumber].Number) {\r\n                    component.interactText = objective.UIString;\r\n                    objectiveVisible = true;\r\n                    objectiveVisibleSet = true;\r\n                }\r\n                else {\r\n                    objectiveVisible = false;\r\n                    objectiveVisibleSet = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        let visible = false;\r\n        //go through all the components see they require this component to be complete or not.  If not then it is not visible\r\n        for (let componentToCheck of components) {\r\n            //check all the whens\r\n            for (let when of componentToCheck.When) {\r\n                if (when.TriggerType === \"COMPONENT_COMPLETE\" && when.ComponentId === component.Number) {\r\n                    let interactText = \"Interact\";\r\n                    if (componentToCheck.InteractTriggerGroup) {\r\n                        interactText = componentToCheck.InteractTriggerGroup.InteractText;\r\n                    }\r\n                    else if (component.InteractTriggerGroup.InteractText) {\r\n                        interactText = component.InteractTriggerGroup.InteractText;\r\n                    }\r\n                    component.interactText = interactText;\r\n                    \r\n                    component.linkedComponentComplete.push(componentToCheck.Number);\r\n                    visible =  true;\r\n                }\r\n\r\n            }\r\n            //check all the hidewhens\r\n            for (let hideWhen of componentToCheck.HideWhen) {\r\n                if (hideWhen.TriggerType === \"COMPONENT_COMPLETE\" && hideWhen.ComponentId === component.Number) {\r\n                    console.log(\"HIDEWHEN: \" + componentToCheck.Number + \" needs \" + component.Number);\r\n                    let interactText = \"Interact\";\r\n                    if (componentToCheck.InteractTriggerGroup) {\r\n                        interactText = componentToCheck.InteractTriggerGroup.InteractText;\r\n                    }\r\n                    else if (component.InteractTriggerGroup.InteractText) {\r\n                        interactText = component.InteractTriggerGroup.InteractText;\r\n                    }\r\n                    component.interactText = interactText;\r\n                    component.linkedComponentComplete.push(componentToCheck.Number);\r\n                    visible = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        //objective visible always overrides\r\n        if (objectiveVisibleSet) {\r\n            return objectiveVisible;\r\n        }\r\n        else {\r\n            return visible;\r\n        }\r\n    }\r\n\r\n    getComponentInteractName(componentNumber) {\r\n        return componentNumber;\r\n    }\r\n\r\n    render() {\r\n        //if there is a visible dialog component we need to show it\r\n        let renderDialog;\r\n        let activeDialog = this.state.components.find((component) => component.Type === \"DIALOG_TREE\" && component.visible)\r\n        if (activeDialog) {\r\n            if (activeDialog.DialogPrompts.length === 0) { //if there is only one dialog we can show the basic prompt\r\n                let buttonName = activeDialog.Action[0].ActionName;\r\n                renderDialog = <Prompt type=\"single\" buttontext={buttonName} title={activeDialog.PromptTitle} text={activeDialog.PromptBody} promptComplete={() => this.componentComplete(activeDialog)} />\r\n            }\r\n            else { //this is a complex prompt\r\n                console.log(\"Complex Prompt\");\r\n                console.log(activeDialog);\r\n                renderDialog = <Prompt type=\"dialogprompt\" dialogComponent={activeDialog} promptComplete={() => this.componentComplete(activeDialog)} />\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"map\">                \r\n                <ul className=\"component-list\">\r\n                    {this.state.components.map((component) => {\r\n                        if (component.visible && component.Type != \"DIALOG_TREE\") {\r\n                            return <li key={component.Number}><button onClick={() => this.componentComplete(component)}>{component.interactText}</button></li>\r\n                        }\r\n                    })}\r\n                </ul>\r\n                \r\n                {renderDialog}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Map;\r\n","import React, { Component } from 'react'\r\n\r\nimport ObjectiveList from './ObjectiveList'\r\nimport Prompt from './Prompt'\r\nimport Map from './Map'\r\n\r\nclass GameBoard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentObjective: 0,\r\n            currentMap: null,\r\n            mapComponents: [],\r\n            mapObjectives: [],\r\n            nextMap: null,\r\n            nextMapComponent: null,\r\n        };\r\n\r\n        this.changeMap = this.changeMap.bind(this);\r\n    }\r\n\r\n\r\n    changeMap(nextMapId) {\r\n\r\n        \r\n        const nextMap = this.props.missionData.Maps.find(map => map.MapId === nextMapId);\r\n\r\n        //get the components for the maps and the dialogs that are not linked to maps (because the dialog is linked to an objective)\r\n        const nextMapComponents = this.props.missionData.Components.filter(component => component.Placement.MapName === nextMap.MapId || (component.Placement.MapName === \"\" && component.Type === \"DIALOG_TREE\"));\r\n\r\n        const nextMapObjectives = this.props.missionData.Mission.Objectives.filter(objective => objective.ComponentMapName === nextMap.MapId);\r\n        console.log(nextMapObjectives);\r\n\r\n\r\n        let nextMapComponent;\r\n        let nextNextMapId;\r\n        //finding the nextNextMapId is a bit more complicated. Go through all the maplinks and see if the door component for that map link exists in the map components.  If it does we've found the next map.\r\n        for (let mapLink of this.props.missionData.Mission.MapLinks) {\r\n            let componentLink = nextMapComponents.find(component => component.Number == mapLink.DoorComponent);\r\n            if (componentLink) {\r\n                nextMapComponent = mapLink.DoorComponent;\r\n                nextNextMapId = mapLink.SpawnInternalMapName;\r\n                break;\r\n            }\r\n        }\r\n\r\n        console.log(\"nextMapComponent\", nextMapComponent);\r\n        console.log(\"nextNextMapId\", nextNextMapId);\r\n\r\n        this.setState({ currentMap: nextMap, mapComponents: nextMapComponents, mapObjectives : nextMapObjectives, nextMap: nextNextMapId, nextMapComponent: nextMapComponent})        \r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        let renderOutput;\r\n\r\n        if (!this.state.currentMap) {\r\n            let firstMapLink = this.props.missionData.Mission.MapLinks[0];\r\n            renderOutput = <Prompt type=\"single\" buttontext=\"Begin Mission\" title={firstMapLink.DialogBlock.promptTitle} text={firstMapLink.DialogBlock.PromptBody} promptComplete={() => this.changeMap(firstMapLink.SpawnInternalMapName)} />\r\n        }\r\n        else {\r\n            renderOutput = <Map key={this.state.currentMap.MapId} map={this.state.currentMap} components={this.state.mapComponents} objectives={this.state.mapObjectives} />\r\n        }\r\n\r\n        return (\r\n            <div className=\"gameboard\">\r\n                <ObjectiveList objectives={this.props.missionData.Mission.Objectives} />\r\n                {renderOutput}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default GameBoard;\r\n","import React from 'react';\nimport loadinggif from './assets/loadinggif.gif'\n\n\nfunction Loading() {\n\n    return (\n        <img src={loadinggif} />\n    );\n}\n\nexport default Loading;\n","import React, { Component } from 'react'\r\n\r\nimport GameBoard from './GameBoard';\r\nimport Prompt from './Prompt';\r\n\r\nimport Loading from './Loading';\r\n\r\n\r\nclass FoundryGame extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            missionState: \"preview\", //state are preview/intro/playing\r\n            currentMap : null,\r\n        };\r\n\r\n\r\n        this.finishPreview = this.finishPreview.bind(this)\r\n        this.finishIntro = this.finishIntro.bind(this)\r\n    }\r\n\r\n    finishPreview() {\r\n        console.log(\"Preview Finshed\");\r\n        this.setState({ missionState: \"intro\" });\r\n    }\r\n\r\n    finishIntro() {\r\n        console.log(\"Intro finished\");\r\n        this.setState({ missionState: \"playing\" });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = this.props.missionData.Project.PublicName\r\n    }\r\n\r\n    render() {\r\n        let renderOutput;\r\n\r\n        if (this.state.missionState === \"preview\") {\r\n            renderOutput = <Prompt key=\"preview\" type=\"single\" buttontext=\"Continue\" title={this.props.missionData.Project.PublicName} text={this.props.missionData.Project.Description} promptComplete={this.finishPreview}/>\r\n        }\r\n        else if (this.state.missionState === \"intro\") {\r\n            renderOutput = <Prompt key=\"intro\" type=\"single\" buttontext=\"Accept Mission\" title={this.props.missionData.Mission.GrantBlock.PromptTitle} text={this.props.missionData.Mission.GrantBlock.PromptBody} promptComplete={this.finishIntro} />\r\n        }\r\n        else if (this.state.missionState === \"playing\") {\r\n            renderOutput = <GameBoard missionData={this.props.missionData}/>\r\n        }\r\n        else {\r\n            renderOutput = <div>Error, unhandled state {this.state.missionState}.</div>\r\n        }\r\n        \r\n\r\n        return (\r\n            <div>\r\n                {renderOutput}\r\n            </div>\r\n        );\r\n    }\r\n}                            \r\n\r\n\r\nexport default FoundryGame;\r\n","import React from 'react';\nimport FoundryGame from './FoundryGame';\n\nimport mission from './assets/mission.json'\n\nimport './App.css';\n\nfunction App() {\n  console.log(mission);\n\n  return (\n      <div className=\"App\">\n          <FoundryGame missionData={mission} />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}